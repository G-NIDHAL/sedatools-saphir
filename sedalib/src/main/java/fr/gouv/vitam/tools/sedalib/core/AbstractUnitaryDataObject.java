/**
 * Copyright French Prime minister Office/DINSIC/Vitam Program (2015-2019)
 * <p>
 * contact.vitam@programmevitam.fr
 * <p>
 * This software is developed as a validation helper tool, for constructing Submission Information Packages (archives
 * sets) in the Vitam program whose purpose is to implement a digital archiving back-office system managing high
 * volumetry securely and efficiently.
 * <p>
 * This software is governed by the CeCILL 2.1 license under French law and abiding by the rules of distribution of free
 * software. You can use, modify and/ or redistribute the software under the terms of the CeCILL 2.1 license as
 * circulated by CEA, CNRS and INRIA archiveTransfer the following URL "http://www.cecill.info".
 * <p>
 * As a counterpart to the access to the source code and rights to copy, modify and redistribute granted by the license,
 * users are provided only with a limited warranty and the software's author, the holder of the economic rights, and the
 * successive licensors have only limited liability.
 * <p>
 * In this respect, the user's attention is drawn to the risks associated with loading, using, modifying and/or
 * developing or reproducing the software by the user in light of its specific status of free software, that may mean
 * that it is complicated to manipulate, and that also therefore means that it is reserved for developers and
 * experienced professionals having in-depth computer knowledge. Users are therefore encouraged to load and test the
 * software's suitability as regards their requirements in conditions enabling the security of their systems and/or data
 * to be ensured and, more generally, to use and operate it in the same conditions as regards security.
 * <p>
 * The fact that you are presently reading this means that you have had knowledge of the CeCILL 2.1 license and that you
 * accept its terms.
 */
package fr.gouv.vitam.tools.sedalib.core;

import com.fasterxml.jackson.annotation.JsonIgnore;
import fr.gouv.vitam.tools.sedalib.metadata.SEDAMetadata;
import fr.gouv.vitam.tools.sedalib.metadata.namedtype.*;
import fr.gouv.vitam.tools.sedalib.utils.SEDALibException;
import fr.gouv.vitam.tools.sedalib.utils.SEDALibProgressLogger;
import fr.gouv.vitam.tools.sedalib.xml.IndentXMLTool;
import fr.gouv.vitam.tools.sedalib.xml.SEDAXMLEventReader;
import fr.gouv.vitam.tools.sedalib.xml.SEDAXMLStreamWriter;

import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.XMLEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

import static fr.gouv.vitam.tools.sedalib.utils.SEDALibProgressLogger.doProgressLog;
import static fr.gouv.vitam.tools.sedalib.utils.SEDALibProgressLogger.doProgressLogIfStep;

/**
 * The Class AbstractUnitaryDataObject.
 * <p>
 * Abstract class for SEDA unitary data objects (BinaryDataObject and PhysicalDataObject). It contains metadata.
 */
abstract public class AbstractUnitaryDataObject extends DataObjectPackageIdElement implements DataObject, ComplexListInterface {

    /**
     * The list of metadata elements associated with this object.
     * Contains the actual metadata values and definitions.
     */
    protected List<SEDAMetadata> metadataList;

    /**
     * {@inheritDoc}
     */
    @Override
    public List<SEDAMetadata> getMetadataList() {
        return metadataList;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setMetadataList(List<SEDAMetadata> metadataList) {
        this.metadataList = metadataList;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @JsonIgnore
    public String getXmlElementName() {
        return this.getClass().getSimpleName();
    }

    // Inner element
    /**
     * The DataObjectGroup in which is the PhysicalDataObject, or null.
     */
    @JsonIgnore
    DataObjectGroup dataObjectGroup;

    // Constructors

    /**
     * Instantiates a new PhysicalDataObject.
     */
    public AbstractUnitaryDataObject() {
        this(null);
    }

    /**
     * Instantiates a new PhysicalDataObject.
     * <p>
     * If DataObjectPackage is defined the new ArchiveUnit is added with a generated
     * uniqID in the structure.
     *
     * @param dataObjectPackage the DataObjectPackage
     */
    public AbstractUnitaryDataObject(DataObjectPackage dataObjectPackage) {
        super(dataObjectPackage);

        this.metadataList = new ArrayList<>(10);
        this.dataObjectGroup = null;
        if (dataObjectPackage != null)
            try {
                dataObjectPackage.addDataObjectPackageIdElement(this);
            } catch (SEDALibException e) {
                // impossible as the uniqID is generated by the called function.
            }
    }

    // SEDA XML exporter

    /*
     * (non-Javadoc)
     *
     * @see
     * fr.gouv.vitam.tools.sedalib.core.DataObject#toSedaXml(fr.gouv.vitam.tools.
     * sedalib.xml.SEDAXMLStreamWriter)
     */
    public void toSedaXml(SEDAXMLStreamWriter xmlWriter, SEDALibProgressLogger sedaLibProgressLogger)
            throws InterruptedException, SEDALibException {
        try {
            // XML write
            xmlWriter.writeStartElement(getXmlElementName());
            xmlWriter.writeAttributeIfNotEmpty("id", inDataPackageObjectId);
            toSedaXmlMetadataList(xmlWriter);
            xmlWriter.writeEndElement();
        } catch (XMLStreamException e) {
            throw new SEDALibException(
                    "Erreur d'écriture XML du " + getXmlElementName() + " [" + inDataPackageObjectId + "]", e);
        }

        int counter = getDataObjectPackage().getNextInOutCounter();
        doProgressLogIfStep(sedaLibProgressLogger, SEDALibProgressLogger.OBJECTS_GROUP, counter,
                "sedalib: " + counter + " métadonnées DataObject exportées");
    }

    /**
     * Extracts the XML content between opening and closing tags of the given element name.
     * Removes the opening and closing tags, keeping only the inner content.
     *
     * @param xml         The XML string to extract content from
     * @param elementName The name of the XML element to extract content for
     * @return The extracted XML content between the tags, or null if input is invalid
     */
    private String extractXmlFragments(String xml, String elementName) {
        if (xml == null || xml.isEmpty()) {
            return null;
        }
        xml = xml.replaceFirst("<" + elementName + " .*>", "");
        int endIndex = xml.lastIndexOf("</" + elementName + ">");
        return (endIndex > 0) ? xml.substring(1, endIndex - 1) : null;
    }

    /*
     * (non-Javadoc)
     *
     * @see fr.gouv.vitam.tools.sedalib.core.DataObject#toSedaXmlFragments()
     */
    @Override
    public String toSedaXmlFragments() throws SEDALibException {
        String sedaXml;
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            try (SEDAXMLStreamWriter xmlWriter = new SEDAXMLStreamWriter(baos, IndentXMLTool.STANDARD_INDENT)) {
                toSedaXml(xmlWriter, null);
            }
            sedaXml = baos.toString(StandardCharsets.UTF_8);
        } catch (SEDALibException | XMLStreamException | IOException e) {
            throw new SEDALibException("Erreur interne", e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new SEDALibException("Interruption", e);
        }

        return extractXmlFragments(sedaXml, getXmlElementName());
    }

    // SEDA XML importer

    /**
     * Read the PhysicalDataObject element content in XML expected form from the
     * SEDA Manifest in the ArchiveTransfer. Utility methods for fromSedaXml and
     * fromSedaXmlFragments
     *
     * @param xmlReader the SEDAXMLEventReader reading the SEDA manifest
     * @throws SEDALibException if the XML can't be read or the SEDA scheme is
     *                          not respected
     */
    private void setFromXmlContent(SEDAXMLEventReader xmlReader)
            throws SEDALibException {
        try {
            metadataList = new ArrayList<>(18);
            fillFromSedaXmlMetadataList(xmlReader);
        } catch (SEDALibException e) {
            throw new SEDALibException("Erreur de lecture XML du " + getXmlElementName(), e);
        }
    }

    /**
     * Import the PhysicalDataObject in XML expected form from the SEDA Manifest in
     * the ArchiveTransfer.
     *
     * @param xmlReader             the SEDAXMLEventReader reading the SEDA manifest
     * @param dataObjectPackage     the DataObjectPackage to be completed
     * @param sedaLibProgressLogger the progress logger or null if no progress log expected
     * @return the read PhysicalDataObject, or null if not a PhysicalDataObject
     * @throws SEDALibException     if the XML can't be read or the SEDA scheme is
     *                              not respected
     * @throws InterruptedException if export process is interrupted
     */
    public static boolean importUnitaryDataObjectPackageIdElementFromSedaXml(AbstractUnitaryDataObject udo, SEDAXMLEventReader xmlReader, DataObjectPackage dataObjectPackage,
                                                                             SEDALibProgressLogger sedaLibProgressLogger) throws SEDALibException, InterruptedException {
        DataObjectGroup dog;
        String tmp;
        try {
            tmp = xmlReader.peekAttributeBlockIfNamed(udo.getXmlElementName(), "id");
            if (tmp != null) {
                udo.inDataPackageObjectId = tmp;
                dataObjectPackage.addDataObjectPackageIdElement(udo);
                xmlReader.nextUsefullEvent();
                udo.setFromXmlContent(xmlReader);
                xmlReader.endBlockNamed(udo.getXmlElementName());
            } else return false;
        } catch (XMLStreamException e) {
            throw new SEDALibException("Erreur de lecture XML du " + udo.getXmlElementName()
                    + (udo.inDataPackageObjectId != null ? " [" + udo.inDataPackageObjectId + "]" : ""), e);
        }

        StringType dataObjectGroupId = (StringType) udo.getFirstNamedMetadata("DataObjectGroupId");
        StringType dataObjectGroupReferenceId = (StringType) udo.getFirstNamedMetadata("DataObjectGroupReferenceId");

        if ((dataObjectGroupId != null) && (dataObjectGroupReferenceId != null))
            throw new SEDALibException("Eléments DataObjectGroupReferenceId et DataObjectGroupId incompatibles");
        if (dataObjectGroupId != null) {
            if (dataObjectPackage.getDataObjectGroupById(dataObjectGroupId.getValue()) != null)
                throw new SEDALibException("Elément DataObjectGroup [" + dataObjectGroupId.getValue() + "] déjà créé");
            dog = new DataObjectGroup();
            dog.setInDataObjectPackageId(dataObjectGroupId.getValue());
            dataObjectPackage.addDataObjectGroup(dog);
            dog.addDataObject(udo);
            doProgressLog(sedaLibProgressLogger, SEDALibProgressLogger.OBJECTS_WARNINGS, "sedalib: dataObjectGroup [" + dog.inDataPackageObjectId
                    + "] créé depuis " + udo.getXmlElementName() + " [" + udo.inDataPackageObjectId + "]", null);
        } else if (dataObjectGroupReferenceId != null) {
            dog = dataObjectPackage.getDataObjectGroupById(dataObjectGroupReferenceId.getValue());
            if (dog == null)
                throw new SEDALibException("Erreur de référence au DataObjectGroup [" + dataObjectGroupReferenceId.getValue() + "]");
            dog.addDataObject(udo);
        }
        udo.removeFirstNamedMetadata("DataObjectGroupReferenceId");
        udo.removeFirstNamedMetadata("DataObjectGroupId");

        int counter = dataObjectPackage.getNextInOutCounter();
        doProgressLogIfStep(sedaLibProgressLogger, SEDALibProgressLogger.OBJECTS_GROUP, counter,
                "sedalib: " + counter + " métadonnées DataObject importées");
        return true;
    }

    /**
     * Create a new empty instance of the same AbstractUnitaryDataObject subclass.
     *
     * @return A new empty instance of the same class as the input object, or null if instantiation fails
     */
    @JsonIgnore
    public AbstractUnitaryDataObject getEmptySameAbstractUnitaryDataObjet() throws SEDALibException {
        try {
            return this.getClass().getDeclaredConstructor().newInstance();
        } catch (ReflectiveOperationException e) {
            throw new SEDALibException("Type de DataObject ["+getClass()+"] non géré",e);
        }
    }
    /*
     * (non-Javadoc)
     *
     * @see
     * fr.gouv.vitam.tools.sedalib.core.DataObject#fromSedaXmlFragments(java.lang.
     * String)
     */
    @Override
    public void fromSedaXmlFragments(String fragments) throws SEDALibException {
        AbstractUnitaryDataObject udo = getEmptySameAbstractUnitaryDataObjet();

        try (ByteArrayInputStream bais = new ByteArrayInputStream(fragments.getBytes(StandardCharsets.UTF_8));
             SEDAXMLEventReader xmlReader = new SEDAXMLEventReader(bais, true)) {
            // jump StartDocument
            xmlReader.nextUsefullEvent();
            udo.setFromXmlContent(xmlReader);
            XMLEvent event = xmlReader.xmlReader.peek();
            if (!event.isEndDocument())
                throw new SEDALibException("Il y a des champs illégaux");
        } catch (XMLStreamException | SEDALibException | IOException e) {
            throw new SEDALibException("Erreur de lecture du " + getXmlElementName(), e);
        }

        metadataList = udo.metadataList;
    }

    /**
     * Gets the DataObjectVersion metadata from the metadata list.
     *
     * @return the DataObjectVersion metadata, or null if not found
     */
    @JsonIgnore
    public StringType getMetadataDataObjectVersion() {
        return (StringType) getFirstNamedMetadata("DataObjectVersion");
    }

    // Getters and setters

    /*
     * (non-Javadoc)
     *
     * @see fr.gouv.vitam.tools.sedalib.core.DataObject#getDataObjectGroup()
     */
    public DataObjectGroup getDataObjectGroup() {
        return dataObjectGroup;
    }

    /**
     * Sets the dataObjectGroup.
     *
     * @param dataObjectGroup the new dataObjectGroup
     */
    public void setDataObjectGroup(DataObjectGroup dataObjectGroup) {
        this.dataObjectGroup = dataObjectGroup;
    }
}
