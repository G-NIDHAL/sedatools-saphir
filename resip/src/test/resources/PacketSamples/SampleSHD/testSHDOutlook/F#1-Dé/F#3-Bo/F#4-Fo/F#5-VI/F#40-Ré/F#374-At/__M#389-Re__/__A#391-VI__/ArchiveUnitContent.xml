<Content>
    <DescriptionLevel>Item</DescriptionLevel>
    <Title>VITAM_bilatérale_technnique_MINDEF_v1.0.pdf</Title>
    <Description>Document &quot;VITAM_bilatérale_technnique_MINDEF_v1.0.pdf&quot; joint au message &lt;56D064C8.3060708@culture.gouv.fr&gt;</Description>
    <CreatedDate>2016-02-26T14:45:10Z</CreatedDate>
    <TextContent>
VITAM

Réunion bilatérale technique 
Ministère de la Défense – Equipe Noyau

Valeurs Immatérielles Transférées aux Archives pour Mémoire



2Programme VITAM

Sommaire

• Contexte du projet

• Sujets techniques 
– Réseaux

– Système

– Authentification

– Haute disponibilité

– Exploitabilité 

– Transferts de fichiers

– Gestion de la traçabilité

– Sécurité des supports



3Programme VITAM

Contexte de la réunion

• Chantiers techniques

– Des chantiers techniques se déroulent avec tous les acteurs de la sphère 
publique pour collecter une liste d’entrants qui pourront guider les choix 
techniques du projet Vitam

– 5 chantiers 

• 09/12/2015 : Infrastructures existantes chez les différents acteurs

• 12/01/2016 : Introduction aux API « externes » pressenties de VITAM

• 04/02/2016 : Enjeux de sécurité existants chez les différents acteurs

• 17/02/2016 : Présentation approfondie des API « externe » pressenties 
de VITAM

• 15/03/2016 : Approfondissement des sujets d’exploitabilité

• Du fait de l’importance des 3 ministères porteurs dans le programme Vitam, 
des bilatérales fonctionnelles et techniques sont prévues pour collecter de 
manière plus précise les besoins



4Programme VITAM

L’architecture générale de la solution logicielle 
Vitam

Interfaçage, Indépendance, Réutilisation, Sécurité

Accès
AccèsVersement

Versement
Administration

Administration

Gestion de la donnée
Gestion de la donnée

Pérennisation &amp; Intégrité
Pérennisation &amp; Intégrité

Stockage
Stockage

Archival Storage

Preservation Planning

Data Management

Administration
Ingest Access

Service de
Stockage (Z 42-020)

Connecteur d&apos;accès
Lecture / Écriture

aux archives

VITAM
(OAIS + Z 42-013)

Connecteurs pour 
les dépôts de SIP
(SEDA → Z 44-022)

Application métier

SIRH, SI Achat, ...

Application métier
 

SIRH, SI Achat, SIA

Service de
Stockage (Z 42-020)

Plusieurs offres
de stockage

concurremment
(au moins 1 sera

proposée par VITAM)

Connecteurs pour 
les requêtes
depuis des

Applications métiers



5Programme VITAM

L’architecture fonctionnelle de la solution logicielle 
Vitam



6Programme VITAM

Réseau - Zoning

• VITAM est un back-office

– Accès via les applications métiers ou le SIA

– Pas d’accès directement par les utilisateurs (hors administration)
• Éléments de séparation envisagés

– En entrée de la DMZ Vitam
• API de versement, accès et gestion
• IHM d&apos;administration Vitam

– Distinction des rôles
• Administrateurs systèmes via outils spécialisés : par site a priori obligatoire
• Administrateurs techniques et fonctionnels via IHM : unifié ?

– Les données à protéger sont présentes 

• Sous forme pérenne dans les offres de stockages présents sur les différents sites 
• Sous forme requêtable dans le moteur de données (base de données et 

indexation)
• Ils ne doivent pas être accessibles depuis l&apos;extérieur (Données) et uniquement 

par Vitam quant à l&apos;extérieur (Stockage sur autre site)



7Programme VITAM

Réseau - zoning



8Programme VITAM

Réseau - Zoning

• Il est envisagé d’être compatible avec le modèle de zoning suivant : 

– Zone Frontale/DMZ : héberge les guichets d’accès exposant les API REST 
externes (vers les applications) + service de transfert

– Zone « Applicative » : héberge tous les composants applicatifs exposant les 
API REST internes 

• Il est souhaitable d’avoir une zone/VLAN réservé pour l’accès aux bases 
de données qui ne serait accessible qu’à partir de l’API du moteur de 
données

– Zone technique : héberge les rebonds/bastions ainsi que le moteur de 
déploiement

– Pour les échanges « stockage » (voir le slide suivant)



9Programme VITAM

Réseau – Zoning
Zoom sur le moteur de stockage

• Le moteur de stockage est sur le site primaire et doit interagir 
avec les offres de stockages qui sont réparties sur les sites

– Le moteur de stockage se trouve en zone applicative

– Les offres de stockage se trouveront dans des zones sur chacun 
des sites (est-ce la même zone ou une autre?)

• Comment faire la liaison entre les 2 composants 

– En ressortant du datacenter (proxy en zone frontale) puis en 
rerentrant « par le haut » dans le datacenter cible

– Par un lien ‘direct’ entre les 2 zones (un peu comme des liens 
d’infrastructure)

• Suite à l’atelier 3, les 2 besoins ont été exprimés 
– L’offre de stockage de référence de Vitam devrait être 

compatible avec les 2 visions 



10Programme VITAM

Système

• Virtualisation
– Quelle solution ?
– Solution Iaas ?

• OS utilisé : Centos 
– Version de Centos utilisé : 6 ? 7 ? 
– Quelle est la roadmap ? 

• Durcissement OS
– Noyaux durcis ?
– Mise en œuvre de modules de sécurité linux (LSM) ?

• Élévation de privilèges 
– Découpage des droits entre les administrateurs systèmes (root) et les 

administrateurs applicatifs
• Les populations d’administrateurs systèmes et applicatifs sont-ils différents ?

– Authentification en 2 temps ? (nominative puis élévation de privilèges) su ? Sudo ?
– Dans le cas d’outils de déploiements, force-t-on un utilisateur nominatif à insérer 

son mot de passe Unix ? 



Programme VITAM

Système - Modèle de déploiement

• Les besoins associés aux activités de déploiement et configuration sont les 
suivants :
– Assurer un déploiement cohérent des éléments binaires VITAM sur un 

environnement donné (pas de multi-environnement à ce niveau là)
– Instancier la configuration des éléments binaires VITAM pour chaque cible de 

déploiement 
• Les besoins sous-jacents sont :

– Connaître la topologie de l&apos;environnement VITAM (à déployer et déployé)
– Connaître l&apos;inventaire des éléments VITAM installés
– Tirer partie des fonctionnalités d&apos;élasticité fournies par la plateforme sous-

jacente si elles sont supportées
• Objectifs : 

– Être capable de répondre à l’installation de « petits » VITAM (jusqu’à 1 VM) 
comme les VITAM plus conséquents (&gt; 30 – 50 VM)

– Pour les petits VITAM, on peut faire le parallèle avec devstack ou packstack 
(distributions facilitant le déploiement d’Openstack y compris sur une VM)



12Programme VITAM

Système - Déploiement

• Système de déploiement 
– Mode « push » pressenti pour des raisons de sécurité : du serveur de déploiement 

vers les systèmes cibles
– Limité à un site donné . 

• Il pourra être nécessaire d’avoir des informations d’autres sites (ex : version 
des offres de stockage)

• Cet échange de données est pour l’instant considéré comme « manuel » (ex : 
export par un administrateur technique/système du site distant, envoi du 
fichier, import dans l’outil de déploiement du site primaire)

– Système pressenti : Ansible
• Intégrité des composants livrables

– Intégrité des binaires livrés ?
– Signature des packages ? (type GPG)

• Système de configuration
– Est une sous-partie du processus de déploiement 
– Gestion des secrets 
– Solution envisagé : Basé sur le même outil que le système de déploiement



Programme VITAM

Objets manipulés

• Modèle de données du déploiement
– Composants : atome pour l’intégrateur (et pour toute personne 

désirant construire des services)
– Services : 

• Atome de déploiement pour une vision « production »
• Sur un serveur donné, une seule version d’un service peut être déployé

– Templates : 
• Constitue une unité de distribution sur un serveur
• Est un ensemble de services

– Plate-forme : Bornes et  seuils d&apos;usage de la plate-forme IaaS
– Servers : 

• Contient les éléments de paramétrages du serveur (nom, IP)
• Est lié à un template (et un seul)

– Infrastructure : nom, version, description, propriétés
• Contient les éléments de paramétrages de l’infrastructure (Firewall, 

load-balancer)



14Programme VITAM

Déploiement
Principe de configuration

- n Composants =&gt; 1 
Service

- n Services =&gt; 1 
Template

- 1 Template =&gt; n 
Hosts

En V3 : élasticité
- 1 Template =&gt; 1 
Plate-forme (décrira 
les bornes des Hosts 
autorisés)

- 1 Plate-forme =&gt; n 
Hosts (dynamiques)

(ou extension de 
Template à Plate-
forme)



15Programme VITAM

Déploiement

• Lors d&apos;un déploiement initial
– Configuration des Composants et Services fournis par Vitam
– Ajout possible de Composants
– Modèle de Templates fournis par Vitam
– Création de « vos » Templates sur la base d&apos;un ou plusieurs templates de base
– Création de vos Hosts (quasi automatique en V3)
– Installation des Hosts (OS, bootstrap Vitam)
– Lancement du déploiement (binaires et configurations)

• Lors d&apos;une mise à jour
– Mise à jour des Composants et Services fournis par Vitam
– Mise à jour de vos Templates (versionning)
– Déploiement contrôlé par Vitam

• Pré-actions globales, par Service, par Composants
• Post-actions globales, par Service, par Composants

Des règles ou recommandations existantes dans vos SI ?



Programme VITAM

Méthode de déploiement

• Déploiement « in place » vs « out of place » des binaires 
– In place : On remplace les binaires précédents 
– Out of place : On installe les binaires sur un emplacement différent 

(quitte à avoir un chemin invariant via un système d’alternatives)
• Exemple : OpenJDK, OpenSSL

• Fichiers de configuration
– Les fichiers de configuration sont instanciés via un modèle de 

templating
– Toute modification doit être faite par le moteur de templating sous 

peine de ne pas être prise en compte au prochain upgrade 
• A noter qu’il peut y avoir une historisation du fichier de configuration 

« divergeant » du standard (comme les rpmsave/rpmnew)
– Ces problématiques sont vraies aussi bien en installation « in place » 

que « out of place »

Des règles ou recommandations existantes dans vos SI ?



Programme VITAM

Retour arrière

• Composants stateless
– « In place » : on réinstalle la version précédente (via l’outil de 

déploiement)
– « Out of place » : on change le système d’aliasing pour pointer sur la 

version précédente
• Composants stateful (SGBD)

– Même problématique dans les 2 stratégies de déploiement
– Pour les mises à jours sans impacts sur les données, même cas que les 

composants stateless
– Pour les mises à jours ayant un impact sur les données

• Sauvegarde des données associées au composant (étape longue)
• Upgrade des binaires 
• Phase de mise à jour des données 
• En cas de rollback, restauration des données puis retour arrière des binaires (cf 

stateless)



Programme VITAM

Implémentation du déploiement

• Système de packaging
Avantages Inconvénients

Système de 
packaging de 
la distribution 
(RPM/DEB)

Nativement : 
• Signature des packages (clé gpg)
• Inventaire et de l’intégrité des 
fichiers installés (rpm -V / dpkg -V)

• Dépendances
• Gestion unifiée des packages sur un 
OS

• Installation à faire par root
• Le chemin d’installation est  fixé au 
moment du packaging

• L’utilisateur propriétaire des fichiers 
est fixé au moment du packaging

• Une seule version d’un package 
installée à un moment donné

• Pour le projet Vitam : Maintenir 2 
souches de packages (DEB+ RPM)

Développeme
nt spécifique

• Possibilité de faire l’installation avec 
l’utilisateur applicatif

• Choix du chemin d’installation à 
l’installation

• Possibilité d’installer plusieurs 
versions d’un packages à un 
moment donné

• Pas de gestion unifiée de packages 
avec l’OS

• Pour le projet Vitam : Système de 
packaging à développer



Programme VITAM

Arborescence d’installation

• Si on part sur un système de packaging OS, les chemins d’installation seront 
fixés 

• Pour des questions de points de montage, il nous semble utile de différencier
– « Configuration et binaires »
– « Log »
– « Données »

• 2 approches possibles 
– Respect strict de la FHS

• « Configuration et binaires » : /opt/vitam/&lt; composant&gt;
• « Log » : /var/opt/vitam/&lt; composant&gt;/log
• « Données » : /var/opt/vitam/&lt; composant&gt;/lib

– Normes hors FHS mais plus « intuitive »
• « Configuration et binaires » : 2 possibilités

– /vitam/&lt; composant&gt;  (avec en dessous bin, etc)
– /vitam/produit/&lt; composant&gt; (avec en dessous bin, etc)

• « Log » : /vitam/log/&lt; composant&gt;

• « Données » : /vitam/data/&lt; composant&gt;



Programme VITAM

Utilisateurs d&apos;exécution

• Si on part sur un packaging OS, les utilisateurs Linux 
d&apos;exécution sont fixés lors du packaging

• 2 stratégies sont envisageables : 
– 1 utilisateur « global » (ex : vitam) pour tous les services 

• Cas général : peu de services déployés sur un serveur donné 

– 1 utilisateur par service 
• Permet une segmentation en cas de regroupement de service

– Plus sécurisé mais est-ce justifié ?

• Est plus complexe à administrer



21Programme VITAM

Authentification

• Protocoles d&apos;échanges entre les SI et Vitam
– Protocoles envisagés

• HTTPS pour les API REST
• Autres protocoles pour des flux de fort dimensionnement (FTPS, SFTP, WAARP, 

…)
– VITAM pourrait proposer

• Une interface (au sens logiciel) permettant de s’interfacer avec la 
solution préconisée par la DSI

• Une implémentation de référence (sans doute authentification par 
certificat client)

• Authentification dans les IHM Vitam
– VITAM pourrait proposer 

• Une interface (au sens logiciel) permettant de s’interfacer avec la 
solution préconisée par la DSI

• Une implémentation de référence (solution à définir)



22Programme VITAM

Authentification

• Protocoles d&apos;échanges dans Vitam (entre les modules)
– Protocoles envisagés
• HTTPS ou HTTP
– Faut-il chiffrer entre la zone « Frontale/DMZ » et la 

zone applicative ?
– Entre les sites (communication inter-sites), les échanges 

seront chiffrés, même si mise en place d&apos;un VPN
– Pas de chiffrement entre composants de la zone 

applicative
– Mécanisme d’authentification envisagé
• Secret global de plateforme permettant d’identifier la 

plateforme



23Programme VITAM

Haute disponibilité/Répartition de charge

• 3 types de besoins de haute disponibilité/répartition de 
charge
1.Accès aux « API externes » VITAM à partir des applications Front 

Office
2.Accès aux offres de stockages (site distant) à partir du moteur de 

stockage
3.Accès entre composants applicatifs

• Pour les 2 premiers besoins, la solution serait une solution « 
classique » de LB/HA en coupure
– Sans doute en HTTPS (authentification par certificat client) dans le 

cas 1 . Si l’affinité de session s’avérait nécessaire (à définir durant 
les développements), il serait possible de le faire par SSLID

– Dans le cas de l’implémentation de référence VITAM de l’offre de 
stockage,cela serait sans doute également par LB/HA sur HTTP ou 
HTTPS



24Programme VITAM

Haute disponibilité/Répartition de charge

• Accès entre composants applicatifs

– La solution classique de LB/HA en coupure peut être 
implémenté de 2 manières : 

• 1 LB/HA « central » qui rend le service pour toute la plate 
forme  Cette solution est relativement facilement 
exploitable mais est peu scalable car la fonction est 
centralisée et prend notamment la totalité du trafic de la 
plate forme

• Des LB/HA « distribués » pour chaque service. Cette 
solution est plus scalable car le flux réseau est plus réparti 
(ne passse plus par un seul point) mais est plus 
difficilement exploitable (une même fonction est répartie à 
différents emplacements de la plate forme)



25Programme VITAM

Haute disponibilité/Répartition de charge

• Accès entre composants applicatifs
– Une solution de type « Service Registry » que l’on retrouve dans les 

architectures micro-services : 

• Quand un client désire se connecter, il contacte un composant 
intermédiaire qui connaît à un moment donné la liste des instances 
fournissant le service. Puis le client fait un 2ème appel à l’instance du 
service

• Cette solution permet d’avoir un service centralisé (exploitable) tout en 
limitant les flux sur ce service .

• Quels sont vos expériences/retours ?

• Le choix de la solution devrait être fait avant la bêta



26Programme VITAM

Exploitabilité

• Sauvegarde

– Vu la volumétrie, il n’est pas prévu de « sauvegarde » au sens classique du terme 
pour les données et méta-données mais plutôt de réplication applicative

– Par contre, il est nécessaire de sauvegarder, comme pour tout SI, un certain nombre 
de stock de données (ex : référentiels) 

• Des scripts d’exports/import seront mis à disposition pour fournir sous forme 
« fichiers » le contenu des stocks « critiques » à sauvegarder

• Le système de sauvegarde SI peut ensuite sauvegarder ces fichiers

• Supervision

– VITAM disposera d’une supervision « applicative » qui sera utilisé pour de la prise de 
décision interne à Vitam et qui sera partiellement exposé dans les IHM 
d’administrations 

– Pour permettre une remontée d’informations dans la supervision SI, nous 
proposons SNMP/API Rest et les logs comme canaux . 



27Programme VITAM

Transferts de fichiers

• Besoin d&apos;un outil de transfert de fichiers

– Dans le cadre des versements d&apos;archives ou de la restitution de masse

– Securité : Sécurité du transfert, identification du partenaire

– Exploitation :  Suivi du transfert, reprise sur incident

– Applicatif : Capacité de déclenchement d&apos;actions avant/après/en cas 
d&apos;erreur

• Solutions pressenties

– API HTTP REST

– FTP ou FTPS

– Optionnellement WAARP



28Programme VITAM

Traçabilité des échanges

• Lors d&apos;une requête, une traçabilité peut être active
– Tracer l&apos;activité, les données ou objets numériques accédées

• Les journaux du SAE Vitam doivent répondre
• Lors d&apos;une réponse, la réponse peut être à valeur probante

– Les objets ne sont pas signés dans le SAE car ne résiste pas au temps
• Durée de validité d&apos;un certificat, fragilité de la chaîne de confiance, fragilité des 

algorithmes, ...
• La preuve est donc systémique (droit public) et non par item

– L&apos;activité (cycle de vie, événements) à l&apos;intérieur du SAE doit permettre de 
conserver la valeur probante
• La preuve selon la NF Z 42-013 est systémique

– Horodatage et empreinte (hash et/ou chaînage)
– Journalisation séquentielle et horodatée des événements (cycle de vie, 

événements)
» Les journaux sont eux-mêmes archivés avec une preuve de non modification 

(chaînage ou Arbre de Merkle)
– Une réponse peut intégrer une signature par le SAE

• Elle a une valeur ponctuelle de garantie de la validité des informations transmises 
par le SAE



29Programme VITAM

Sécurisation des supports

• Résistance au vol d&apos;informations
– Le chiffrement est un danger pour la pérennité de l&apos;information

• Perte du secret, corruption de l&apos;algorithme
– Mais ce risque est lié à la durée d&apos;utilisation

• Si le chiffrement est applicatif
– La durée est liée à l&apos;application (ici &gt; 20 ans)

• Si le chiffrement est sur les supports
– La durée est liée à la viabilité des supports (&lt;  10 ans)

– Le chiffrement est possible sur des supports à durée de vie limitée
• Les supports rapides comme les disques sont de bons candidats

– Rapidité des calculs
– Durée de vie inférieure à 10 ans (voire 5 ans)
– Chiffrement porté par le stockage (le changement de stockage change le chiffrement)

• Les supports lents comme les bandes ne sont pas de bons candidats
– Lenteur d&apos;accès, durée de vie potentiellement &gt; 10 ans, chiffrement par le lecteur 

(rendant difficile la garantie)
– Une sécurité périmètrique est préférable (bunker)

• Note : NF Z42-020 n&apos;impose aucun chiffrement ni signature mais une garantie systémique via 
les journaux


	Diapo 1
	Diapo 2
	Diapo 3
	Diapo 4
	Diapo 5
	Diapo 6
	Diapo 7
	Diapo 8
	Diapo 9
	Diapo 10
	Diapo 11
	Diapo 12
	Diapo 13
	Diapo 14
	Diapo 15
	Diapo 16
	Diapo 17
	Diapo 18
	Diapo 19
	Diapo 20
	Diapo 21
	Diapo 22
	Diapo 23
	Diapo 24
	Diapo 25
	Diapo 26
	Diapo 27
	Diapo 28
	Diapo 29

</TextContent>
</Content>